// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDc9e8747DecodeGithubComNdRTechDbForumModels(in *jlexer.Lexer, out *PostArr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PostArr, 0, 1)
			} else {
				*out = PostArr{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Post
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeGithubComNdRTechDbForumModels(out *jwriter.Writer, in PostArr) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PostArr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeGithubComNdRTechDbForumModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostArr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeGithubComNdRTechDbForumModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostArr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeGithubComNdRTechDbForumModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostArr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeGithubComNdRTechDbForumModels(l, v)
}
func easyjsonDc9e8747DecodeGithubComNdRTechDbForumModels1(in *jlexer.Lexer, out *Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(int)
				}
				*out.Id = int(in.Int())
			}
		case "author":
			out.User_nick = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(string)
				}
				*out.Created = string(in.String())
			}
		case "forum":
			out.Forum_slug = string(in.String())
		case "thread":
			if in.IsNull() {
				in.Skip()
				out.Thread_id = nil
			} else {
				if out.Thread_id == nil {
					out.Thread_id = new(int)
				}
				*out.Thread_id = int(in.Int())
			}
		case "isEdited":
			if in.IsNull() {
				in.Skip()
				out.Is_edited = nil
			} else {
				if out.Is_edited == nil {
					out.Is_edited = new(bool)
				}
				*out.Is_edited = bool(in.Bool())
			}
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(int)
				}
				*out.Parent = int(in.Int())
			}
		case "Parents":
			if in.IsNull() {
				in.Skip()
				out.Parents = nil
			} else {
				if out.Parents == nil {
					out.Parents = new(string)
				}
				*out.Parents = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeGithubComNdRTechDbForumModels1(out *jwriter.Writer, in Post) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.Id == nil {
		out.RawString("null")
	} else {
		out.Int(int(*in.Id))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"author\":")
	out.String(string(in.User_nick))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message\":")
	out.String(string(in.Message))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"created\":")
	if in.Created == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Created))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"forum\":")
	out.String(string(in.Forum_slug))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"thread\":")
	if in.Thread_id == nil {
		out.RawString("null")
	} else {
		out.Int(int(*in.Thread_id))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isEdited\":")
	if in.Is_edited == nil {
		out.RawString("null")
	} else {
		out.Bool(bool(*in.Is_edited))
	}
	if in.Parent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"parent\":")
		if in.Parent == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Parent))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Parents\":")
	if in.Parents == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Parents))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Post) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeGithubComNdRTechDbForumModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Post) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeGithubComNdRTechDbForumModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Post) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeGithubComNdRTechDbForumModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Post) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeGithubComNdRTechDbForumModels1(l, v)
}
