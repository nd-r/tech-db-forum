// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson84c0690eDecodeGithubComNdRTechDbForumModels(in *jlexer.Lexer, out *UsersArr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(UsersArr, 0, 1)
			} else {
				*out = UsersArr{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 UserResp
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComNdRTechDbForumModels(out *jwriter.Writer, in UsersArr) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v UsersArr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComNdRTechDbForumModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersArr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComNdRTechDbForumModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersArr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComNdRTechDbForumModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersArr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComNdRTechDbForumModels(l, v)
}
func easyjson84c0690eDecodeGithubComNdRTechDbForumModels1(in *jlexer.Lexer, out *UserUpdProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "about":
			(out.About).UnmarshalEasyJSON(in)
		case "email":
			(out.Email).UnmarshalEasyJSON(in)
		case "fullname":
			(out.Fullname).UnmarshalEasyJSON(in)
		case "nickname":
			(out.Nickname).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComNdRTechDbForumModels1(out *jwriter.Writer, in UserUpdProfile) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.About).IsDefined() {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"about\":")
		(in.About).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"email\":")
	(in.Email).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fullname\":")
	(in.Fullname).MarshalEasyJSON(out)
	if (in.Nickname).IsDefined() {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"nickname\":")
		(in.Nickname).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserUpdProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComNdRTechDbForumModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserUpdProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComNdRTechDbForumModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserUpdProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComNdRTechDbForumModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserUpdProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComNdRTechDbForumModels1(l, v)
}
func easyjson84c0690eDecodeGithubComNdRTechDbForumModels2(in *jlexer.Lexer, out *UserResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "about":
			out.About = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "nickname":
			out.Nickname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComNdRTechDbForumModels2(out *jwriter.Writer, in UserResp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.About != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"about\":")
		out.String(string(in.About))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"email\":")
	out.String(string(in.Email))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fullname\":")
	out.String(string(in.Fullname))
	if in.Nickname != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"nickname\":")
		out.String(string(in.Nickname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComNdRTechDbForumModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComNdRTechDbForumModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComNdRTechDbForumModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComNdRTechDbForumModels2(l, v)
}
func easyjson84c0690eDecodeGithubComNdRTechDbForumModels3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "about":
			(out.About).UnmarshalEasyJSON(in)
		case "email":
			out.Email = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "nickname":
			(out.Nickname).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson84c0690eEncodeGithubComNdRTechDbForumModels3(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.About).IsDefined() {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"about\":")
		(in.About).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"email\":")
	out.String(string(in.Email))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fullname\":")
	out.String(string(in.Fullname))
	if (in.Nickname).IsDefined() {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"nickname\":")
		(in.Nickname).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson84c0690eEncodeGithubComNdRTechDbForumModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson84c0690eEncodeGithubComNdRTechDbForumModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson84c0690eDecodeGithubComNdRTechDbForumModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson84c0690eDecodeGithubComNdRTechDbForumModels3(l, v)
}
